참조와 복사

복사 : 원시값(string, boolean, 숫자)는 참조가 아닌 복사
ex)
var a = 1;
var b = a;
b = 3;
console.log(a) >> 1
console.log(b) >> 3

참조 : 객체, 메서드, 배열은 복사가 아닌 참조.(c언어 포인터 생각)
ex)
var a = [1,2,3];
var b = a;
b[1] = 5;
console.log(a) >> 1 5 3
console.log(b) >> 1 5 3
:: b배열을 바꿨지만, a배열도 바뀜 >> 같은 주소를 참조하고 있다는 의미

객체를 참조가 아닌 복사하는방법
ex)
var obj = {a:1,b:2,c:3};
var obj2 = {};
Object.keys(obj).foreach(function(key){
    obj2[key] = obj[key];
})
:완벽한 방법은 아님.
obj2 = JSON.parse(JSON.stringify(obj)); >> 이걸사용


ex) 객체간의 참조관계를 확인하는법
var obj1 = {a:1,b:2};
var obj2 = obj1
obj1 === obj2 >> true

var obj1 = {a:1,b:2};
var obj2 = {a:1,b:2};
obj1 === obj2 >> false
:: 객체간의 비교연산자 사용시 참조관계여야만 true값을 리턴함

팩토리패턴 >> 공장에서 찍어내듯이...
ex)
var 프로토타입 = {               >> 겹치는부분은 프로토타입으로 만들고 (객체끼리공유를 할 수 있다.)
    type : '카드',
    attack : function(){},
    defend : function(){},
};
function 카드공장(name, hp, att)  
{
    var 카드 = {
        name = name,           >>겹치지않는 부분은 매게변수를 이용
        hp = hp,
        att = att,
    }
    카드.__proto__ = 프로토타입
    return 카드;
}

프로토타입을 사용하는 이유 : 수정하기편하게하기위해서
위 예에서 만약 카드를 3000장찍었는데, type을 바꿔야 하는 상황이 온다면,
프로토타입.type : '장난감' 이 한줄이면 모든 카드의 type이 바뀜.
또, 만약 각 카드에 width, height를 적용해야하는상황에서 프로토타입이 없다면 일일이 해줘야하지만
프로토타입이 있기때문에 프로타타입.width = 10, 프로토타입.height = 20 만 추가해주면 된다.

Object.create(프로토타입) >> 프로토타입이 들어간 객체를 생성해줌
__proto__ 는 표준이 아니므로 사용x
대신

function 카드공장(name, hp, att)  
{
    var 카드 = {
        name = name,           >>겹치지않는 부분은 매게변수를 이용
        hp = hp,
        att = att,
    }
    카드.__proto__ = 프로토타입
    return 카드;
}
이걸
function 카드공장(name, hp, att)  
{
    var 카드 = Object.create(프로토타입);
    카드.name = name;
    카드.hp = hp;
    카드.att = att;
    return 카드;
}
이렇게바꿔줘야함.
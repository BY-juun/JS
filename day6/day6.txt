Array.fill() 메서드.
fill() 메서드는 배열의 시작 인덱스부터 끝 인덱스 이전까지 정적인 값 하나로 채움.
매개변수 > fill(value, start, end)
ex) arr.fill(1,1,3) >> arr의 첫번째 요소와 3-1번째 까지의 요소에 1로 값이 채워짐


map() 메서드 : 배열의 각요소를 매핑(짝지어주는것)
>> 1대1로 짝짓되, 기존 객체를 수정하지 않는 것.
배열.map(function(value, index, arr){return value;});
>> value는 배열의 각 요소의 값
>> index는 배열의 index
>> arr 은 기존의 배열
>> return value; 이므로 value값으로 매칭된다.
>> 굳이 value가 아니어도 된다.
ex)
var candidate_num = Array(45).fill().map(function (element, index){
    return index+1;
}); >> 여기서는 index로 매칭, 그 외 value, index, arr이 아니어도 된다.

slice() >> 어떤 배열의 begin부터 end까지에 대한 얕은 복사본을 만든다.
ex)
const animals = ['ant', 'bison', 'camel', 'duck', 'elephant'];

console.log(animals.slice(2));
// expected output: Array ["camel", "duck", "elephant"]

console.log(animals.slice(2, 4));
// expected output: Array ["camel", "duck"]

console.log(animals.slice(1, 5));
// expected output: Array ["bison", "camel", "duck", "elephant"]


sort()메서드 : 배열의 요소를 적절한 위치에 정렬한 후 그 배열을 반환한다.
arr.sort([compareFunction])
compareFunction >> 정렬의 기준을 제시하는 함수
compareFunction(a,b) : 0보다 큰 경우, b를 a보다 낮은 인덱스로 소트합니다.
                     : 0보다 작은 경우 a를 b보다 낮은 색인으로 정렬합니다. 즉, a가 먼저옵니다.
                     : 0을 반환하면 a와 b를 서로에 대해 변경하지 않고 모든 다른 요소에 대해 정렬

JavaScript로 HTML 태크 선택하기
: document.getElementById("id") >> id로 태그 선택
: document.getElemnetByClassName("className")[i]
    >> class는 여러개 일수 잇으므로 몇번째인지 선택.